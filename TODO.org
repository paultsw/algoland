* TODO Algorithm Land
** ML Algorithms & Theory
# See also: https://en.wikipedia.org/wiki/Outline_of_machine_learning#Machine_learning_algorithms
# See also: Kevin P Murphy, "Machine Learning: a probabilistic perspective"
+ [ ] classic regression:
  - linear regression
  - logistic regression
+ [ ] generalized linear models
  - poisson regression
  - (... etc: more here ...)
+ [ ] clustering:
  - k-means
  - dbscan
+ [ ] tree-based models
  - decision trees
  - bagging
  - boosting
  - gradient boosting regression trees
  - packages: catboost, xgboost
+ [ ] support vector machines
  - review popular kernels
  - review "kernel methods" broadly
+ [ ] expectation-maximization
+ [ ] gaussian mixture models
+ [ ] variational bayes
+ [ ] maximum likelihood estimator
+ [ ] sampling methods (importance, reservoir, etc)
+ [ ] markov chain monte carlo algorithms
+ [ ] gradient descent
+ [ ] loss functions:
  + kl-divergence
  + cross-entropy
  + poisson loss
+ [ ] connectionist temporal classification (CTC loss)
+ [ ] hidden markov models
  + viterbi
  + baum-welch
  + (etc)
+ [ ] NLP
  - latent dirichlet allocation
  - n-grams, skip-grams
  - packages: spaCy, gensim
  - what's "density estimation"? relation to language models?
  - tf-idf
+ [ ] planning and optimization
  - bellman's equation
  - (... TODO: relationship to physics ...)
  - (... TODO: relationship to AI ...)
+ [ ] integer programming
  - (... TODO: lots to say about this ...)
# --- Deep Learning
+ [ ] RNNs
  - GRUs, LSTMs
  - how to do dropout in an RNN?
+ [ ] CNNs / Computer Vision
  - feature visualization for InceptionNet and VGG-19
  - review a glossary of famous comp vision models
  - review wavenet-style models with dilations
  - explain "locally-connected"
  - filter-size selections
  - zero-padding the ends
  - explain: purpose of 1x1 convolutions
  - FFT-based convolutions vs winograd-based convolutions
  - pooling at each step of the CNN
  - package: openCV
+ [ ] autoencoders (incl. variational)
+ [ ] attention layers and self-attention
  - single-headed vs multi-headed attention?
  - implement attention layer via matmuls
+ [ ] transfer learning
+ [ ] bayesian neural networks
+ [ ] generative-adversarial networks (GANs)
  - general architecture of GANs
  - training GANs (and GAN tricks broadly)
+ [ ] Graph neural networks
+ [ ] batch normalization, layer normalization, instance normalization
+ [ ] dropout
+ [ ] sgd algos: adam, adamax, momentum, (...etc)
+ [ ] reinforcement learning
  - (re-read primer and skim textbook)
  - exploration vs exploitation
  - multi-armed bandits & contextual bandits
  - finite vs infinite horizons
  - policy functions and reward functions
  - SARSA
  - model-based vs model-free
  - how do you deploy reinforcement learning "in the wild"? (open-ended; read case studies)
# --- Theory
+ [ ] gram-schmidt
+ [ ] jacobians
+ [ ] hessians
+ [ ] inner and outer products
+ [ ] random variables: definition, formalization
+ [ ] change of variables
+ [ ] precision-recall, f1, etc
+ [ ] type 1 and 2 errors (memorize entire table)
+ [-] Probability Distributions (memorize properties & pdfs/pmfs)
  - Bernoulli
  - Binomial
  - Normal
  - Student-t
  - multinoulli
  - categorical
  - dirichlet
  - beta
  - gamma (incl. exponential, other special cases)
  - poisson
  - multivariate normal
  - multivariate student-t
** Advanced Algos & Data Structures
# (See "Introduction to Algorithms" by CRLS for more.)
# https://en.wikipedia.org/wiki/List_of_data_structures
# https://en.wikipedia.org/wiki/List_of_algorithms
# --- misc
+ [ ] Boyer Moore majority vote
+ [ ] Boyer Moore string search
+ [ ] misra-gries heavy hitters algorithm
+ [ ] knuth-morris-pratt (string matching) algorithm
+ [ ] Kadane's algorithm (find contiguous subarray with biggest sum)
+ [ ] floyd's tortoise-and-hare algorithm (for cycle detection)
+ [ ] Manacher's algorithm (for finding palindromes)
+ [-] rabin-karp & bitmasks (both for string pattern matching)
# -  -  -
+ [ ] busy-beaver algorithm and ackermann function
+ [ ] union-find algorithm / disjoint-set data structure
# --- greedy & dynamic
+ [ ] greedy algorithms (writeup)
  - proving the matroid property
  - identifying the optimal substructure property
  - designing greedy algorithms on graphs and arrays
  - fractional knapsack
  - https://leetcode.com/discuss/general-discussion/1061059/ABCs-of-Greedy
  - http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap17.htm
  - https://leetcode.com/discuss/general-discussion/969327/graph-algorithms-one-place-dijkstra-bellman-ford-floyd-warshall-prims-kruskals-dsu
+ [ ] dynamic programming
  - bellman's algorithm
  - 0/1 knapsack problem
  - https://leetcode.com/discuss/general-discussion/458695/Dynamic-Programming-Patterns
# --- graphs
+ [ ] heap-based and Queue Based BFS
+ [ ] depth first search
+ [ ] transitive closure
+ [ ] topological sort
+ [-] min span tree
  - [-] kruskal's algorithm
  - [-] prim's algorithm
  - [ ] boruvka's algorithm (https://en.wikipedia.org/wiki/Bor%C5%AFvka%27s_algorithm)
+ [ ] steiner trees
+ [ ] low-degree spanning trees
+ [-] shortest paths
  - [-] dijkstra's algorithm
  - [-] floyd-warshall
  - [-] bellman-ford
  - [ ] all-pairs shortest paths
  - [ ] A*-search
  - [ ] K-shortest path routing: https://en.wikipedia.org/wiki/K_shortest_path_routing
  - [ ] johnson's algorithm (for all-pairs shortest paths)
  - [ ] suurballe's algorithm
  - [ ] seidel's algorithm
  - See more at: https://en.wikipedia.org/wiki/Shortest_path_problem
+ [ ] flows
  - [ ] edmonds-karp
  - [ ] min-cut/max-flow
  - [ ] augmenting paths (concept)
+ [ ] eulerian circuits
  - Hierholzer's algorithm:  https://en.wikipedia.org/wiki/Eulerian_path#Hierholzer's_algorithm
  - Fleury's algorithm: https://en.wikipedia.org/wiki/Eulerian_path#Fleury's_algorithm
+ [ ] bipartite matching
  - hungarian algorithm
  - hopcroft-karp[-karzanov] algorithm
+ [ ] job scheduling
+ [ ] drawing graphs on 2D plane
  - spectral layout methods (using the spectral properties of the adjacency matrix)
  - force-based layout methods (using analogies to molecular mechanics)
# --- probabilistic ds
+ [X] bloom filters
+ [ ] count sketch
+ [ ] count-min sketch
+ [ ] quotient filter
+ 
# --- trees & heaps
+ [ ] traversals: in-order, post-order, pre-order
+ [ ] binary search trees
+ [ ] tries
+ [ ] b-trees
+ [ ] red-black trees
+ [ ] interval trees
+ [ ] union-find (disjoint-set) data structure
# -  -  -
+ [-] (binary) heaps & priority queues
+ [-] treaps
+ [-] fibonacci heap
# -  -  -
+ [ ] k-d trees
+ [ ] fenwick trees (or binary indexed trees)
  - https://leetcode.com/discuss/interview-question/4153767/All-you-need-to-know-about-BIT
# --- sort & search
+ [ ] binary search
+ [ ] heapsort
+ [ ] quicksort
+ [ ] merge sort
+ [ ] bubble sort
+ [ ] insertion sort
+ [ ] selection sort
# --- mathematics
+ [ ] Fast Fourier Transform
+ [ ] Levenbergâ€“Marquardt algorithm
# --- game theory
+ [ ] minimax (minimizing the maximum loss) && maximin (maximizing the minimum gain)
# --- randomized algorithms
+ [ ] overview of monte-carlo versus las vegas algorithms
+ [ ] stratified sampling
+ [ ] monte-carlo sampling
+ ( ... et cetera ... )
